BONUS problem 1:

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    struct ListNode *p=l1, *q=l2;
    //(struct ListNode*)malloc(sizeof(struct ListNode));
    int carry=0, sum,c1=0,c2=0,f=0;
    while(l1!=NULL)
    {
        c1++;
        l1=l1->next;
    }
   // printf("%d\n",c1);
    while(l2!=NULL)
    {
        c2++;
        l2=l2->next;
    }
    if(c1!=c2)
    {
    if(c1>c2)
    {
        int i;
        for(i=c2;i<c1;i++)
        {
            //q->next=x;
            append(&q,f);
        }
    }
    else if(c2>c1)
    {
        int i;
        for(i=c1;i<c2;i++)
        {
            //p->next=x;
            append(&p,f);
        }
    }
    }
    //p->next=NULL;
    //q->next=NULL;
    struct ListNode *l3=NULL;
    //(struct ListNode*)malloc(sizeof(struct ListNode));
    while(p!=NULL && q!=NULL)
    {
        sum=add(carry,p->val,q->val);
        carry=0;
        if(sum>9)
        {
            carry=sum/10;
            sum=sum%10;
        }
        p=p->next;
        q=q->next;
        //l3->val=sum;
        //l3=l3->next;
        //l3->next=NULL;
        append(&l3,sum);
        if(p==NULL && q==NULL && carry==1)
        {
            append(&l3,carry);
        }
    }
    return l3;
}
int add(carry,val1,val2)
{
    int sum;
    sum=carry+val1+val2;
    if(carry==1)
    {
        carry=0;
    }
    return sum;
}

week:3

DAY1:
problem 1:(lcm gcd)

#include <stdio.h>
int GCD(int A, int B);
int GCD(int A, int B) {
    if(B==0)
        return A;
    else
        return GCD(B, A % B);
}
int main() {
	//code
	long long int t,i,j;
	scanf("%lld",&t);
	for(j=0;j<t;j++)
	{
	    long long int lcm,gcd,a,b;
	    scanf("%lld %lld",&a,&b);
	    gcd=GCD(a,b);
	    lcm=(a*b)/gcd;
	    printf("%lld %lld\n",lcm,gcd);
	}
	return 0;
}

problem 2:(prime numbers)

#include <stdio.h>

int main() {
	//code
	int t,i,j;
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
	   int a,k;
	   scanf("%d",&a);
	   for(j=2;j<=a;j++)
	   {
	       int flag=0;
	       for(k=j-1;k>=2;k--)
	       {
	           if(j%k==0)
	           {
	               flag=1;
	               break;
	           }
	       }
	       if(flag==0)
	       {
	           printf("%d ",j);
	       }
	   }
	   printf("\n");
	}
	return 0;
}

problem 3:change

#include<stdio.h>
int power(int a,int b);
int power(int a,int b)
{
	int i;
	if(b==0)
	{
		return 1;
	}
	if(b%2==0)
	{
		return power(a*a,b/2);
	}
	else
	{
		return (a*power(a*a,(b-1)/2));
	}
}
int d, x, y,z;
void extendedEuclid(long long int A,long long  int B) {
    if(B == 0) {
        d = A;
        x = 1;
        y = 0;
    }
    else {
        extendedEuclid(m, c%m);
		long long int temp = z;
		z = y;
		y = temp - (c/m)*y;
    }
}
long long int modInverse( long long int c, long long int M)
{
extendedEuclid(c,M);
return (z%M+M)%M;
}
int main()
{
	long long int a,b,c,m,k,p;
	long long int ans;
	scanf("%lld %lld %lld %lld",&a,&b,&c,&m);
	k=power(a,b);
	p=modInverse(c,m);
	ans=(k%m * p%m)%m;
	printf("%lld",ans);
}


DAY 2:
problem 1:

#include<stdio.h>
int gcd(int a, int b);
int gcd(int a, int b)
{
	if(b==0)
	{
		return a;
	}
	else
	{
		return (gcd(b,a%b));
	}
}
int main()
{
	int i,n,count=0;
	scanf("%d",&n);
	for(i=1;i<n;i++)
	{
		int k=gcd(i,n);
		if(k==1)
		{
			count++;
		}
	}
	printf("%d",count);
}

problem 2:

// { Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
void printList(Node* node) 
{ 
	while (node != NULL) { 
		cout << node->data <<" "; 
		node = node->next; 
	}  
	cout<<"\n";
} 
/* Function to get the middle of the linked list*/
int getMiddle(Node *head);
int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;

		int data;
		cin>>data;
		struct Node *head = new Node(data);
		struct Node *tail = head;
		for (int i = 0; i < n-1; ++i)
		{
			cin>>data;
			tail->next = new Node(data);
			tail = tail->next;
		}
		cout<<getMiddle(head)<<endl;
	}
	return 0; 
} 

// } Driver Code Ends


/* Link list Node 
struct Node {
    int data;
    Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
    
}; */

/* Should return data of middle node. If linked list is empty, then  -1*/
int getMiddle(Node *head)
{
   // Your code here
   int k,c=0,c1=0;
   struct Node *p;
   struct Node *q=head;
   p=head;
   while(p!=NULL)
    {
        c++;
        p=p->next;
    }
    k=c/2+1;
    while(q!=NULL)
    {
        c1++;
        if(c1==k)
        {
            return q->data;
        }
        q=q->next;
    }
}

problem :4

// { Driver Code Starts
// C program to detect loop in a linked list
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

/* Link list Node */
struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

void push(struct Node **head_ref, int new_data) {

    struct Node *new_Node = new Node(new_data);

    new_Node->next = (*head_ref);
    /* move the head to point to the new Node */
    (*head_ref) = new_Node;
}
int detectloop(struct Node *list);
/* Driver program to test above function*/
int main() {
    int t, n, c, x, i;
    cin >> t;
    while (t--) {
        /* Start with the empty list */
        cin >> n;
        struct Node *head = NULL;
        struct Node *temp;
        struct Node *s;
        cin >> x;
        push(&head, x);
        s = head;
        for (i = 1; i < n; i++) {
            cin >> x;
            push(&head, x);
        }
        /* Create a loop for testing */
        cin >> c;
        if (c > 0) {
            c = c - 1;
            temp = head;
            while (c--) temp = temp->next;
            s->next = temp;
        }
        int g = detectloop(head);
        if (g)
            cout << "True\n";
        else
            cout << "False\n";
    }
    return 0;
}
// } Driver Code Ends


/*
struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }

*/
int detectloop(Node *head) {

    struct Node*p=head;
   struct Node*q=head;
   while(p && q &&q->next)
   {
       p=p->next;
       q=q->next->next;
       if(p==q)
       {
           return true;
       }
   }
   return false;
}


problem 4:

// { Driver Code Starts
#include<stdio.h>
#include<stdlib.h>
#include<bits/stdc++.h>
using namespace std;

struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};

void append(struct Node **tail, int data)
{
	struct Node* new_node = new Node (data);
	(*tail)->next = new_node;
	(*tail) = new_node;
	return;
}

void printList(struct Node *tmp){
    while(tmp){
        cout<<tmp->data<<' ';
        tmp=tmp->next;
    }
    cout<<endl;
}

int countNodesinLoop(struct Node *head);

/* Drier program to test above function*/
int main()
{
    int t;
    cin>>t;
    while(t--){
        int n, tmp;
        cin>>n;
        struct Node *head = NULL;
        struct Node *tail = NULL;
        struct Node* temp;
        struct Node *s;
        struct Node *t;
        cin>>tmp;
        struct Node* new_node = new Node (tmp);
        head = new_node;
        tail = new_node;
        s=head;
        for(int i=1; i<n; i++){
            cin>>tmp;
            append(&tail, tmp);
        }
        /* Create a loop for testing */
        // srand(time(NULL));
        int c;
        cin>>c;
        if(c>0){
            //c=c-1;
            temp=head;
            t = head;
            while(t->next)t=t->next;
            while(c--)temp=temp->next;
            t->next=temp;
            // s->next=temp;
        }
        //printList(head);
        cout<<countNodesinLoop(head)<<endl;
	}
    return 0;
}// } Driver Code Ends


/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/
// Your task is to complete the function this function
// function should return the size of the loop
int countNodesinLoop(struct Node *head)
{
     // Code here
    struct Node*p=head;
    struct Node*q=head;
    struct Node*temp=head;
    int c=0,k;
   while(p && q &&q->next)
   { p=p->next;
       q=q->next->next;
       if(p==q)
       {
           temp=p;
           while(temp->next!=q)
           {
               c++;
               temp=temp->next;
           }
           return c+1;
       }
       
   }
   return c;

}

problem5:

// { Driver Code Starts
// C program to find n'th Node in linked list
#include <stdio.h>
#include <stdlib.h>
#include<iostream>
using namespace std;

/* Link list Node */
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};


/* Function to get the nth node from the last of a linked list*/
int getNthFromLast(struct Node* head, int n);



/* Driver program to test above function*/
int main()
{
  int T,i,n,l,k;

    cin>>T;

    while(T--){
    struct Node *head = NULL,  *tail = NULL;

        cin>>n>>k;
        int d1;
        cin>>d1;
        head = new Node(d1);
        tail = head;
        for(i=1;i<n;i++)
        {
            cin>>l;
            tail->next = new Node(l);
            tail = tail->next;
        }

    printf("%d", getNthFromLast(head, k));
    cout << endl;
    }
    return 0;
}// } Driver Code Ends


/* struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

/* Should return data of n'th node from the end of linked list.
*  head: head of the linked list
*  n: nth node from end to find
*/
int getNthFromLast(Node *head, int n)
{
       // Your code here
       int c=0,c1=0;
       struct Node*p=head;
       while(p!=NULL)
       {
           c++;
           p=p->next;
       }
       int k=c-n+1;
       struct Node *q=head;
       if(k<1)
       {
           return -1;
       }
       else{
       while(q!=NULL)
       {
           c1++;
           if(c1==k)
           {
               return q->data;
           }
           q=q->next;
       }}
}

DAY 3:

question 1:

#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};

void append(struct node **root,int n)
{
    struct node *temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=n;
    temp->next=NULL;
    if(*root==NULL)
    {
        *root=temp;
    }
    else
    {
        struct node *p;
        p=*root;
        while(p->next!=NULL)
        {
            p=p->next;
        }
        p->next=temp;
    }
}
void printlist(struct node*n)
{
    while(n!=NULL)
    {
        printf("%d ",n->data);
        n=n->next;
    }
}
int main()
{
    int t,n,i,j;
    scanf("%d",&t);
    for(i=0;i<t;i++)
    {
        struct node *root=NULL;
        struct node *root1=NULL;
        scanf("%d",&n);
        int a[n];
        for(j=0;j<n;j++)
        {
            
        scanf("%d",&a[j]);
        if(a[j]%2==0)
            {
        append(&root,a[j]);}
        else
        {
            append(&root1,a[j]);
        }
        }
        printlist(root);
        printlist(root1);
        printf("\n");
    }

}

problem 2:

Node* reverseList(Node *head)
{
  // Your code here
  struct Node* newhead=head;
  if(head->next==NULL)
  {
      return head;
  }
  else
  {
      newhead=reverseList(head->next);
      head->next->next=head;
      head->next=NULL;
      return newhead;
  }


problem 4:

Node * removeDuplicates( Node *head) 
{
 // your code goes here
    struct Node*p=head;
    struct Node*temp=head;
    struct Node*q=temp->next;
    while(p!=NULL)
    {
        temp=p;
        q=temp->next;
        while(q!=NULL)
        {
            if(p->data==q->data)
            {
                temp->next=q->next;
                //q->next=NULL;
            }
            else
            {
                q=q->next;
                temp=temp->next;
            }
        }
        p=p->next;
       
    }
    return head;
}

problem 5:

// { Driver Code Starts
//

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

Node* inputList(int size)
{
    Node *head, *tail;
    int val;
    
    cin>>val;
    head = tail = new Node(val);
    
    while(--size)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
}

Node* findIntersection(Node* head1, Node* head2);

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m;
	    cin>> n >> m;
	    
	    Node* head1 = inputList(n);
	    Node* head2 = inputList(m);
	    
	    Node* result = findIntersection(head1, head2);
	    
	    printList(result);
	    cout<< endl;
	}
	return 0;
}
// } Driver Code Ends


/* The structure of the Linked list Node is as follows:

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

*/
void append( struct Node **root,int n);
struct Node *root=NULL;
void append( struct Node **root,int n)
{
    struct Node *temp;
    temp=(struct Node*)malloc(sizeof(struct Node));
    temp->data=n;
    temp->next=NULL;
    if(*root==NULL)
    {
        *root=temp;
    }
    else
    {
        struct Node*p;
        p=*root;
        while(p->next!=NULL)
        {
            p=p->next;
        }
        p->next=temp;
    }
}

Node* findIntersection(Node* head1, Node* head2)
{
    // Your Code Here
    struct Node *temp1=head1;
    struct Node *temp2=head2;
    struct Node *root=NULL;
    while(temp1!=NULL )
    {
        if(temp1->data==temp2->data)
        {
            append(&root,temp1->data);
            temp1=temp1->next;
            temp2=head2;
        }
        else
        {
            if(temp2->next!=NULL)
            {
            temp2=temp2->next;}
            else
            {
                temp1=temp1->next;
                temp2=head2;
            }
        }
    }
    return (root);
}
 problem :6
 
 struct Node*temp=NULL;
    temp=head1;
    while(temp!=NULL)
    {
        if(temp->data==0)
        {
            temp->data=-1001;
            temp=temp->next;
        }
        else
        {
        temp->data=-1*(temp->data);
        temp=temp->next;
        }
    }
    temp=head2;
    while(temp!=NULL)
    {
       if(temp->data<0 && temp->data!=-1001)
       {
           return -temp->data;
       }
       if(temp->data==-1001)
       {
           return 0;
       }
       temp=temp->next;
    }
    return -1;
}


DAy 5:
problem 1:

bool isCircular(Node *head)
{
   // Your code here
   struct Node*p=head->next;
   if(head==NULL || head->next==NULL)
   {
       return false;
   }
   while(p!=head)
   {
       p=p->next;
       if(p==NULL)
       {
           return false;
           break;
       }
   }
   if(p==head){
   return true;}
   return false;
   
}
